#!/usr/bin/env python3

# import argparse
import argparse
import tempfile
import os
from pathlib import Path
import subprocess

from typing import List, Union

import sys

QNS_DIR = "qns"




def handle_parser():
    """
    Load in Parser from QNS and add docker tag
    """

    launcher_parser = argparse.ArgumentParser()

    launcher_parser.add_argument("-d",
                                 "--docker",
                                 action="store_true",
                                 help="Describes whether or not to use docker-compose to run qns.",
                                 dest="docker")

    launcher_parser.add_argument("--clear-cache",
                                 action="store_true",
                                 help="Describes whether or not to delete website data after run.",
                                 dest="clear_cache")

    launcher_parser.add_argument('-v', '--verbosity',
                                 help=argparse.SUPPRESS,
                                 action='store',
                                 type=int,
                                 dest='verbosity')

    launcher_parser.add_argument('-o', '--output-dir',
                               help=argparse.SUPPRESS,
                               action='store', type=str, dest='output_directory',
                               default=os.getcwd())

    return launcher_parser


def get_temp_dir():
    return tempfile.TemporaryDirectory()


def add_custom_args(qns_args: List[str], temp_output_folder: Path) -> List[str]:
    """
    Removes qns parameters that the launcher handles and add needed parameters
    Returns:

    """
    # Tags to remove or modify are held as arguments to launcher parser
    # They accept a value, so it's easiest to capture it so it doesn't get passed on to qns

    qns_args = ['-m', '--export-config', '-v 0', f"-o {temp_output_folder}"] + qns_args

    return qns_args


def run_command(parameters: Union[str, List[str]]):
    if isinstance(parameters, str):
        parameters = parameters.split()
    process = subprocess.Popen(parameters, stdout=subprocess.PIPE)
    output, error = process.communicate()
    if not error:
        return True, output
    else:
        return False, error


def determine_command(launcher_args, qns_args, temp_dir):
    # Msg currently not being used. Maybe hookup with QNS logging.
    msg = ""
    cmd = ""

    if launcher_args.docker:
        msg += "Running QNS with Docker...\n"
        cmd += "docker-compose -f docker-compose.yml run qns "
    else:
        msg += "Running QNS within venv...\n"
        cmd += "./qns "

    args_for_qns = add_custom_args(qns_args, temp_dir)

    return cmd + " ".join(args_for_qns)


def move_files(dir):
    """
    Move files from QNS ouput to MSP input
    """

    qns_output = os.listdir(dir)

    for file in qns_output:
        file_path = dir + '/' + file
        if file.endswith(".sizes") or file.endswith(".synteny"):
            os.rename(file_path, "../data/example_inputs/" + file)
        elif file.endswith(".conf"):
            os.rename(file_path, "../configurations/" + file)


# Start Here
qns_found = os.path.isdir(QNS_DIR)
if not qns_found:
    sys.stderr.write("QNS directory not found, aborting.\n")
    sys.exit(1)


print(QNS_DIR)
with get_temp_dir() as temp_dir:
    os.chdir(QNS_DIR)
    parser = handle_parser()
    launcher_args, qns_args = parser.parse_known_args()

    cmd = determine_command(launcher_args, qns_args, temp_dir)
    print(cmd)
    # Path("output").mkdir(parents=True, exist_ok=True)
    sucess, output = run_command(cmd)
    if not sucess:
        print(output)
    else:
        move_files(temp_dir)
        os.chdir("..")

        print("Check here for diagram: http://localhost:9090/mySyntenyPortal/htdocs/syncircos.php")
        run_command("./kick-off-docker.sh")

        if launcher_args.clear_cache:
            run_command("rm -rf data/test")
            print("\nRemoved Cache stored at data/test...")
