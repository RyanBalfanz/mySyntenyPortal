#!/usr/bin/env python3

# import argparse
import tempfile
import os
from pathlib import Path
import subprocess
from qns.args_parser import prepare_args
import sys

def handle_parser():
    """
    Load in Parser from QNS and add docker tag
    """

    parser = prepare_args()

    parser.add_argument("-d",
                        "--docker",
                        action="store_true",
                        help="Describes whether or not to use docker-compose to run qns.",
                        dest="docker")

    parser.add_argument("--clear-cache",
                        action="store_true",
                        help="Describes whether or not to delete website data after run.",
                        dest="clear_cache")
    return parser


def filter_out_tag(s, tag):
    return s.replace(" "+tag, "")


def get_temp_dir():
    return tempfile.TemporaryDirectory()


def get_raw_args(t_dir):
    args = " ".join(sys.argv[1:])
    tags_to_remove = ["-d", "--docker",
                      "-m", "--export_config",
                      '-v', '--verbosity',
                      '-o', '--output-dir',
                      '--clear-cache']

    for tag in tags_to_remove:
        args = filter_out_tag(args, tag)

    args += " -m"
    args += " --export-config"
    args += " -v 0"
    args += " -o " + t_dir
    return args


def run_command(cmd):
    process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    if not error:
        return True, output
    else:
        return False, error


def determine_command(args, t_dir):
    # Msg currently not being used. Maybe hookup with QNS logging.
    msg = ""
    cmd = ""

    if args.docker:
        msg += "Running QNS with Docker...\n"
        cmd += "docker-compose -f docker-compose.yml run qns "
    else:
        msg += "Running QNS within venv...\n"
        cmd += "./qns "

    raw_args = get_raw_args(t_dir)
    return cmd + raw_args


def move_files(dir):
    """
    Move files from QNS ouput to MSP input
    """

    qns_output = os.listdir(dir)

    for file in qns_output:
        file_path = dir + '/' + file
        if file.endswith(".sizes") or file.endswith(".synteny"):
            os.rename(file_path, "../data/example_inputs/"+file)
        elif file.endswith(".conf"):
            os.rename(file_path, "../configurations/"+file)


#Start Here
with get_temp_dir() as temp_dir:
    os.chdir("qns")
    parser = handle_parser()
    parser_args = parser.parse_args()

    cmd = determine_command(parser_args, temp_dir)
    #print(cmd)
    #Path("output").mkdir(parents=True, exist_ok=True)
    sucess, output = run_command(cmd)
    if not sucess:
        print(output)
    else:
        move_files(temp_dir)
        os.chdir("..")

        print("Check here for diagram: http://localhost:9090/mySyntenyPortal/htdocs/syncircos.php")
        run_command("./kick-off-docker.sh")

        if parser_args.clear_cache:
            run_command("rm -rf data/test")
            print("\nRemoved Cache stored at data/test...")
